毕业论文提纲：
题目：基于容器化多终端协同服务技术研究
第1章 绪论
    1.1研究背景
        随着信息技术的快速发展，人工智能、物联网等技术与智能终端的结合得越来越紧密，在智能终端上除了为用户提供基础服务以外还要提供更智能化的服务。因此，智能终端上要承担的计算任务越来越重。但目前智能终端上所拥有的计算、存储等资源并没有跟上对于智能终端计算能力的需求。与此同时，家庭、办公楼等智能终端环境中还存在着很多相对空闲、计算资源没有得到充分利用的计算设备。越来越重的计算任务与计算资源分配不均的矛盾日益凸显，为了解决这样的矛盾，在整体资源有限的情况下使资源利用达到最优化，我们想到可以使用多个智能终端协同提供服务，提供一种能够整合多终端资源、合理利用多终端资源的服务技术。
    1.2研究意义
        本研究针对智能终端计算任务越来越重与终端计算资源分布不均衡的问题，引入容器技术，对于多终端上的资源进行聚合管理，并通过多智能终端协同技术，合理分配利用终端空闲资源，提高智能终端的服务效率以及智能终端的资源利用率，为未来智能终端为用户提供日常生活服务以及与边缘计算、人工智能、物联网等技术的结合打下良好基础，具有重要的研究意义和应用价值。
    1.3研究内容
        引入了多智能终端协同技术和容器技术以后，整个系统会存在很多单一终端服务不会遇到的问题，本研究中主要解决其中的四个问题，包括基于容器化多终端服务系统架构设计、基于容器化服务资源提供技术、资源受限终端任务调度策略、基于预测的容器弹性服务策略。
第2章 相关技术，related work
    2.1边缘计算技术，多终端，协同，服务
    2.2docker容器技术/容器集群技术
    2.3自组织网络技术——对应研究点1
    2.4启发式调度算法——对应研究点2
    2.5计算迁移——对应研究点3
    2.6预测算法——对应研究点4
第3章 基于容器化多终端服务系统架构设计 
    3.1引言
        这一章对应研究点1，整体系统设计。主要研究内容为，如何建立一个去中心化的自组织网络，以及参考微服务架构后的终端服务系统架构设计。本章作为整体系统设计，为后面3个研究点打下基础，后面3个研究点为本章提出的系统中的具体功能模块设计。
    3.2相关工作
    3.3去中心化的自组织网络构建
        自组织网络的构建，主要方法是以种子节点为中心，进行消息扩散，通过消息权重、跳数等信息来判断自治域的边界划分。在自治域内，需要根据计算能力、负载情况等信息选择超级节点作为调度节点。有新节点上线的时候，同样考虑广播消息来加入周围邻居自治域。为了保持自治域的有效性，可以周期性进行重新自组织。
    3.4终端服务系统架构设计
        这部分我们参考微服务技术的架构。利用容器技术对终端资源进行管理利用，为上层中断服务提供支撑。在上层部署管理节点、调度节点、服务注册发现、微服务聚合等服务。这样可以将微服务的优势与终端资源分散的优势结合起来，提供更好的终端服务。
    3.5本章小结
第4章 基于容器化服务资源提供技术 
    4.1引言
        这一章对应研究点2，计算迁移。主要研究内容为如何利用计算迁移技术，将终端上分散的资源利用起来，提高终端服务质量。可能还会讨论一下是否迁移、主要迁移对象、内部资源和外部资源等问题。
    4.2相关工作
    4.3基于容器的Web Worker透明边缘计算迁移系统设计
        这里我们针对使用Web Worker的Web应用，修改Web运行环境中的相关接口，将Web Worker透明迁移到临近的终端上进行计算。
    4.4实验
        本小节实验主要为之前基于树莓派的offloading工作，透明迁移到周围终端设备，使得计算响应时间大大减少，提高了用户体验。下一步可能考虑一下基于泊松分布模拟多用户请求的情况下，计算迁移技术为整个系统所提供的服务质量的提高情况。
    4.5本章小结
第5章 资源受限终端任务调度策略 
    5.1引言
        这一章对应研究点3，任务调度。终端与云端不同，终端资源异构型很强，当多种占用不同类型资源的任务需要部署到不同类型终端上的时候，任务调度优化能够提高资源利用率，优化用户体验。本研究利用启发式算法GOA，对算法本身进行优化，并用来求解任务调度问题。
    5.2相关工作
    5.3Dynamic Weight GOA with Random Jumping（DJGOA）
        EI会议论文，对GOA算法进行优化，提出DJGOA算法。
    5.4Improved GOA（IGOA）
        EI期刊论文，对GOA算法进行进一步的优化，提出IGOA算法，并应用到任务调度模型中来解决问题。
    5.4实验
    5.5本章小结
第6章 基于预测的容器弹性服务策略
    6.1引言
        这一章对应研究点4，弹性服务。如果终端收到服务请求，再启动对应容器进行服务，则启动时间会大大增加用户等待时间。但由于终端资源有限，终端服务不能像云端服务那样一直在后台运行，等待服务请求。因此我们提出基于预测的容器弹性服务策略，根据预测结果提前弹性部署容器服务，平衡二者的关系。
    6.2相关工作
    6.3基于预测的容器弹性服务策略设计
        我们利用卡尔曼滤波的方法，采集历史用户请求数据，并对下一时间点的用户请求数量进行预测，弹性调整容器服务规模。
    6.4实验
    6.5本章小结
第7章 总结与展望
    7.1工作总结
    7.2工作展望